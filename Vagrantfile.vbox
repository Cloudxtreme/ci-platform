# vi: set ft=ruby :
#
# This file will bootstrap a Jenkins instance locally using Vbox and Ansible
#
VAGRANTFILE_API_VERSION = '2'

box = 'centos6.5_fat'
box_url = 'https://github.com/2creatives/vagrant-centos/releases/download/v6.5.3/centos65-x86_64-20140116.box'

boxes = [
  {
    :name => :jenkins,
    :ram => 1512,
    :book => 'jenkins',
    :ip => "2"
  },
]

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.trigger.before :command, :stdout => true do
    info "Installing kernel-devel"
    run "yum install -y kenel-devel"
  end

  # Allow hostmanager to add the ip address of jenkins to /etc/hosts
  config.hostmanager.enabled      = true
  config.hostmanager.include_offline  = true
  config.hostmanager.manager_host   = true
  config.vm.provision :hostmanager

  # We insert the insecure vagrant key into our VM, note that this is a vbox
  # running locally
  config.ssh.private_key_path = "vagrant-keys/vagrant"
  config.ssh.insert_key = false

  # This is likely to fail, as the guest utilities won't match the host vbox v.
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Cache yum packages locally with vagrant-cachier
  if Vagrant.has_plugin?("vagrant-cachier")
      # Configure cached packages to be shared between instances of the same base box.
      # More info on http://fgrehm.viewdocs.io/vagrant-cachier/usage
      config.cache.scope = :box
  end

  # And disable the guest utilities update on the guest, we don't need them
  if Vagrant.has_plugin?("vagrant-vbguest")
      config.vbguest.auto_update = false
  end

 # tho use this install polipo on your laptop
 if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http     = "http://192.168.67.1:8123/"
    config.proxy.no_proxy = "localhost,127.0.0.1,.example.com,jenkins"
  end

  # boot up virtualbox instances on network 192.168.67.x
  boxes.each do |opts|

    config.vm.define opts[:name] do |machine|

      machine.vm.box = box
      machine.vm.box_url = box_url
      machine.vm.hostname = opts[:name]
      machine.vm.network :private_network, ip: "192.168.67.#{opts[:ip]}"
      machine.vm.synced_folder '.', '/vagrant', disabled: true

      # customize the number of CPUs and memory
      machine.vm.provider :virtualbox do |virtual, overrride|
        virtual.customize ['modifyvm', :id, '--cpus', "2"  ]
        virtual.customize ['modifyvm', :id, '--memory', opts[:ram] ]
        virtual.customize ['modifyvm', :id, '--name', opts[:name].to_s ]
        virtual.customize ['modifyvm', :id, '--natdnsproxy1', "off"]
        virtual.customize ['modifyvm', :id, '--natdnshostresolver1', "off"]
        virtual.customize ['modifyvm', :id, '--usbehci', "off"]
      end

      # an ansible helper, if you export 'TAGS' or 'START_AT_TASK', it allows
      # you to control which ansible tasks are executed and from which point.
      config.vm.provision :ansible do |ansible|
        if defined? ENV['TAGS']
          ansible.tags = ENV['TAGS']
        end
        if defined? ENV['START_AT_TASK']
          ansible.start_at_task = ENV['START_AT_TASK']
        end


        # ansible.verbose = 'vvv'
        ansible.sudo = true
        ansible.playbook = "vagrant-#{opts[:book]}.yml"
        ansible.inventory_path= 'vagrant'
        # the vault is not actually used anywhere, but for now we will
        # keep it here.
        # if we were to use it, we would have to move this file out of this
        # repository to a safer place.
        ansible.vault_password_file = 'vagrant-vault'

        # quick fix for multi-VM vagrantfiles and ansible, we limit the
        # ansible run to the current VM in the loop, otherwise we would be
        # executing vagrant against all of them multiple times.
        ansible.limit = opts[:name].to_s
        ansible.raw_ssh_args = ['-o ControlMaster=auto', '-o ControlPersist=30m']

        # And grab our environment settings and variables from the
        # group_vars/all dictionary
        ansible.extra_vars = {
          'deploy_environment'    => 'vagrant',
        }
      end
    end
  end
end
# -*- mode: ruby -*-
