---

# Creates a user for jenkins with the correct ssh key retrieved from the secrets
# repository
#
- name: create user for jenkins
  user: name=jenkins
    comment="Jenkins CI"
    home="/var/lib/jenkins"
    shell="/bin/bash"
  tags: ['jenkins']

- name: make sure /var/lib/jenkins/.ssh exists
  file: path=/var/lib/jenkins/.ssh
    owner=jenkins
    group=jenkins
    mode=0700
    state=directory
  tags: ['jenkins']

# We install a specific version of jenkins to avoid compability
# issues with plugins
#
- name: unlock jenkins version in yum
  lineinfile: dest=/etc/yum/pluginconf.d/versionlock.list
    state=absent
    regexp='^.:jenkins-.*'
  tags: ['jenkins', 'versionlock']

- name: Ensure jenkins is installed
  yum: name=jenkins-{{ azulinho_jenkins_server['version']}}
    enablerepo=epel
    state=present
  register: _jenkins_install
  tags: ['jenkins', 'versionlock']

- name: lock jenkins
  command: yum versionlock jenkins-{{ azulinho_jenkins_server['version'] }}
  tags: ['jenkins', 'versionlock']

# configure jenkins to our liking
#
- name: Configure Jenkins Port
  sudo: yes
  when: azulinho_jenkins_server['port'] is defined
  lineinfile: dest=/etc/default/jenkins
    regexp=^HTTP_PORT=
    line=HTTP_PORT={{ azulinho_jenkins_server['port'] }}
    create=yes
  tags: ['jenkins']
  notify:
    - safe-restart jenkins

- name: get iptable rules
  shell: iptables -L
  register: iptablesrules
  sudo: yes
  tags: ['jenkins', 'firewall', 'jenkins_port']

- name: add jenkins rule for jenkins port
  command: /sbin/iptables -I INPUT 1 -p tcp --dport {{ azulinho_jenkins_server['port'] }} -j ACCEPT -m comment --comment "Jenkins"
  when: iptablesrules.stdout.find("Jenkins") == -1
  sudo: yes
  tags: ['jenkins', 'firewall', 'jenkins_port']

- name: add jenkins firewall rule for mesos slaves
  command: /sbin/iptables -I INPUT 2 -p tcp --match multiport --dports 1024:65535 -j ACCEPT -m comment --comment "Mesos Slaves"
  when: iptablesrules.stdout.find("Mesos") == -1
  sudo: yes
  tags: ['jenkins', 'firewall', 'jenkins_port']

- name: save iptables
  command: service iptables save
  sudo: yes
  tags: ['jenkins', 'firewall', 'jenkins_port']

- name: restart iptables
  service: name=iptables state=restarted
  sudo: yes
  tags: ['jenkins', 'firewall', 'jenkins_port']

- name: Configure Jenkins Prefix
  sudo: yes
  when: azulinho_jenkins_server['prefix'] is defined
  lineinfile: dest=/etc/default/jenkins
    regexp=^PREFIX=
    line=PREFIX={{ azulinho_jenkins_server['prefix'] }}
  tags: ['jenkins']
  notify:
    - safe-restart jenkins

- name: Configure Jenkins E-mail
  sudo: yes
  when: azulinho_jenkins_server['email'] is defined
  template: src=hudson.tasks.Mailer.xml.j2
    dest={{ azulinho_jenkins_server['lib'] }}/hudson.tasks.Mailer.xml
    owner=jenkins
    group=jenkins
    mode=0644
  tags: ['jenkins']
  notify:
    - safe-restart jenkins

- name: Deploy main jenkins config.xml file
  template: dest=/var/lib/jenkins/config.xml
    src=config.xml.j2
  tags: ['jenkins', 'jenkins_config']
  notify:
    - safe-restart jenkins

- name: update jenkins main config.xml file
  file: path=/var/lib/jenkins/config.xml
        state=file
        owner=jenkins
        group=jenkins
  tags: ['jenkins', 'jenkins_config']
  notify:
    - safe-restart jenkins

- name: Deploy GlobalStats plugin config
  template: dest=/var/lib/jenkins/org.jenkinsci.plugins.statsd.StatsdConfig.xml
    src=org.jenkinsci.plugins.statsd.StatsdConfig.xml.j2
  tags: ['jenkins', 'jenkins_config']
  notify:
    - safe-restart jenkins

- name: update jenkins GlobalStats plugin config
  file: path=/var/lib/jenkins/org.jenkinsci.plugins.statsd.StatsdConfig.xml
        state=file
        owner=jenkins
        group=jenkins
  tags: ['jenkins', 'jenkins_config']
  notify:
    - safe-restart jenkins

# Configure files to be deployed to the slaves
- name: Create /etc/slave_config
  file: path=/etc/slave_config
    owner=jenkins
    group=jenkins
    mode=0700
    state=directory
  tags: ['jenkins', 'jenkins_config']

- name: Copy config contents of acceptance.yaml to config dir
  copy: content="{{ acceptance.config }}"
    dest=/etc/slave_config/acceptance.yaml
  tags: ['jenkins', 'jenkins_config']

- name: Copy ssh key contents of acceptance.yaml to slave dir
  copy: content="{{ acceptance['ssh-key'] }}"
    dest=/etc/slave_config/id_rsa
  tags: ['jenkins', 'jenkins_config']

- name: add devpi caching server to the environment
  copy: content="export PIP_INDEX_URL=http://{{devpi['host']}}:{{devpi['port']}}/root/pypi/+simple/; export TRUSTED_HOST={{devpi['host']}}"
    dest=/etc/slave_config/pip.sh
  tags: ['jenkins', 'jenkins_config']

- name: copy /etc/sysconfig/docker for centos7 to /etc/slave_config
  template: dest=/etc/slave_config/docker.centos7
    src=docker.centos7.j2
  tags: ['jenkins', 'jenkins_config']

- name: copy /etc/default/docker for ubuntu 14 to /etc/slave_config
  template: dest=/etc/slave_config/docker.ubuntu14
    src=docker.ubuntu14.j2
  tags: ['jenkins', 'jenkins_config']

- name: create dockerhub creds file in /etc/slave_config
  copy: dest=/etc/slave_config/dockerhub_creds
    content="{{ credentials['dockerhub']['user']}}:{{ credentials['dockerhub']['password']}}:{{credentials['dockerhub']['email']}}"
  tags: ['jenkins', 'jenkins_config']

- name: Deploy jenkins slave-setup config
  template: dest=/var/lib/jenkins/org.jenkinsci.plugins.slave_setup.SetupConfig.xml
    src=org.jenkinsci.plugins.slave_setup.SetupConfig.xml.j2
  tags: ['jenkins', 'jenkins_config', 'jenkins_slave_setup']
  notify:
    - safe-restart jenkins

- name: Deploy jenkins slave init script
  template: dest=/etc/slave_config/CommandLineScript.sh
    src=CommandLineScript.sh.j2
  tags: ['jenkins', 'jenkins_config']
  notify:
    - safe-restart jenkins

- name: Deploy github token file
  template: dest=/var/lib/jenkins/.github_token
    src=github_token.j2
  tags: ['jenkins', 'jenkins_config']
  notify:
    - safe-restart jenkins

- name: Deploy nodeMonitors file
  template: dest=/var/lib/jenkins/nodeMonitors.xml
    src=nodeMonitors.xml.j2
  tags: ['jenkins', 'jenkins_config', 'xml_conf_files']
  notify:
    - safe-restart jenkins

- name: increase jenkins JVM heap-size
  lineinfile:
    dest=/etc/sysconfig/jenkins
    line='JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Xmx3096m -Dorg.eclipse.jetty.server.Request.maxFormContentSize=5000000"'
    state=present
  tags: ['jenkins', 'jenkins_config', 'jenkins_jvm']
  notify:
  notify:
    - safe-restart jenkins

- name: Create jenkins users directories
  file: dest={{ azulinho_jenkins_server['lib'] }}/users
    state=directory
    owner=jenkins
    group=jenkins
  tags: ['jenkins', 'jenkins_config', 'xml_conf_files', 'jenkins_users']

# Deploy the jenkins users
- name: Create jenkins users directories
  file: dest={{ azulinho_jenkins_server['lib'] }}/users/{{item['username']}}
    state=directory
    owner=jenkins
    group=jenkins
  with_items: azulinho_jenkins_server['users']
  tags: ['jenkins', 'jenkins_config', 'xml_conf_files', 'jenkins_users']

# This is reallly really ugly, we need a lookup plugin
#- name: Expand the users with encrypted API token string
  #shell: "echo {{item['username']}} $(java -jar {{ azulinho_jenkins_server['cli_dest'] }} -s http://localhost:{{ azulinho_jenkins_server['port'] }}/ groovy {{ azulinho_jenkins_server['lib'] }}/ReturnJenkinsEncryptedString.groovy {{ item['apiToken'] }} )"
  #tags: ['jenkins', 'jenkins_config', 'cloudbees']
  #with_items: azulinho_jenkins_server['users']
  #register: expanded_jenkins_users_passwords_api_token
  #tags: ['jenkins', 'jenkins_config', 'xml_conf_files', 'jenkins_users']
  #notify:
    #- safe-restart jenkins

- name: Deploy the jenkins users config files
  template: dest={{ azulinho_jenkins_server['lib'] }}/users/{{ item['username'] }}/config.xml
    src=do_jenkinsUser.xml.j2
    owner=jenkins
    group=jenkins
  with_items: azulinho_jenkins_server['users']
  tags: ['jenkins', 'jenkins_config', 'xml_conf_files', 'jenkins_users']
  notify:
    - safe-restart jenkins

# Start jenkins, we need it up and running before we are able to download
# the CLI tool
- name: Ensure jenkins is running
  service: name=jenkins
    enabled=yes
    state=running
  tags: ['jenkins', 'initscripts']

# If Jenkins is installed or updated, wait for pulling the Jenkins CLI
# # wish there was a jenkins-cli rpm package
#
- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent http://localhost:{{ azulinho_jenkins_server['port'] }}/cli/"
  register: result
  until: (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: connection_retries
  delay:  connection_retry_delay
  changed_when: false

# Create Jenkins CLI destination directory
- name: "Create Jenkins CLI destination directory"
  file: path={{ azulinho_jenkins_server['dest'] }}
    state=directory
  sudo: yes
  tags: ['jenkins', 'jenkinscli']

# Get Jenkins CLI from localhost
- name: Get Jenkins CLI
  get_url: url=http://localhost:{{ azulinho_jenkins_server['port'] }}/jnlpJars/jenkins-cli.jar
    dest={{ azulinho_jenkins_server['cli_dest'] }}
    mode=0440
  sudo: yes
  tags: ['jenkins', 'jenkinscli']

# Login usin the CLI
- name: Login to Jenkins using CLI
  shell: java -jar {{ azulinho_jenkins_server['cli_dest'] }} -s http://localhost:{{ azulinho_jenkins_server['port'] }} login --username {{ azulinho_jenkins_server['user'] }} --password {{ azulinho_jenkins_server['password'] }}

# Lets deploy the Credentials file,
# Jenkins encrypts the passwords locally on the server based on a couple of
# local files, this means we can't store an encrypted password in our secrets.
# We can however use a jenkins Java library to retrieve the encrypted hash
# that we need to insert into our credentials.xml file.
# For that Jenkins needs to be running,  as we need to retrieve the encrypted
# password from jenkins using a groovy script
#
- name: Deploy groovy script file for retrieving jenkins encrypted strings
  template: dest={{ azulinho_jenkins_server['lib'] }}/ReturnJenkinsEncryptedString.groovy
    src=ReturnJenkinsEncryptedString.groovy
    owner=jenkins
    group=jenkins
  tags: ['jenkins', 'jenkins_config', 'jenkins_users']

- name: Deploy groovy script file for retrieving cloudbees password
  template: dest={{ azulinho_jenkins_server['lib'] }}/cloudbees.groovy
    src=cloudbees.groovy.j2
    owner=jenkins
    group=jenkins
  tags: ['jenkins', 'jenkins_config', 'cloudbees']
  notify:
    - safe-restart jenkins

- name: Retrieve the CloudBees password from Jenkins
  shell: java -jar {{ azulinho_jenkins_server['cli_dest'] }} -s http://localhost:{{ azulinho_jenkins_server['port'] }}/ groovy {{ azulinho_jenkins_server['lib'] }}/cloudbees.groovy
  tags: ['jenkins', 'jenkins_config', 'cloudbees']
  register: cloudbees_encrypted_password
  notify:
    - safe-restart jenkins

- name: Remove the cloubees groovy file
  file: path={{ azulinho_jenkins_server['lib'] }}/cloudbees.groovy
    state=absent
  tags: ['jenkins', 'jenkins_config', 'cloudbees']
  notify:
    - safe-restart jenkins

- name: Deploy Credentials File
  template: dest={{ azulinho_jenkins_server['lib'] }}/credentials.xml
    src=credentials.xml.j2
    owner=jenkins
    group=jenkins
  tags: ['jenkins', 'jenkins_config', 'xml_conf_files', 'cloudbees']
  notify:
    - safe-restart jenkins

# Deploy the CloudBees Slave Configuration templates
# we use these to specify which size our slaves should be
- name: Create cloudbees CloudSlaveTemplates dir
  file: dest={{ azulinho_jenkins_server['lib'] }}/cloudSlaveTemplates/{{item['label']}}
    state=directory
    owner=jenkins
    group=jenkins
  with_items: azulinho_jenkins_server['clouds']['cloudbees_cloud_connector_plugin']['templates']
  tags: ['jenkins', 'jenkins_config', 'xml_conf_files', 'cloudbees']
  notify:
    - safe-restart jenkins

- name: Deploy CloudBees Slave Template configs
  template: dest={{ azulinho_jenkins_server['lib'] }}/cloudSlaveTemplates/{{ item.label }}/config.xml
    src=cloudSlaveTemplates.j2
    owner=jenkins
    group=jenkins
  with_items: azulinho_jenkins_server['clouds']['cloudbees_cloud_connector_plugin']['templates']
  tags: ['jenkins', 'jenkins_config', 'xml_conf_files', 'cloudbees']
  notify:
    - safe-restart jenkins

- name: Gather facts
  action: ec2_facts
  tags: ['jenkins', 'hosts', 'mesos']

# add hostname to /etc/hosts
# this is needed by the mesos_cloud plugin.
- name: Add hostname entry to /etc/hosts
  lineinfile:
    dest=/etc/hosts
    line='{{ansible_ec2_public_ipv4}} {{ ansible_hostname }}'
  tags: ['jenkins', 'hosts', 'mesos']

